# OpenShift Ansible Inventory

[masters]
master[1:3].ocp.internal.net

[etcd]
master[1:3].ocp.internal.net
#master1.ocp.internal.net openshift_ip=172.27.0.11 openshift_hostname=master1.sdn.internal.net

[nodes]
# 
master[1:3].ocp.internal.net openshift_node_group_name=node-config-master-crio
infra[1:3].ocp.internal.net openshift_node_group_name=node-config-infra-crio
node[1:3].ocp.internal.net openshift_node_group_name=node-config-compute-crio

[nfs]
#nfs.ocp.internal.net

[lb]
lb.ocp.internal.net

#[glusterfs]
##node1.ocp.internal.net glusterfs_ip='172.27.0.101' glusterfs_devices='[ "/dev/sdb", "/dev/sdc", "/dev/sdd" ]'
##node1.ocp.internal.net glusterfs_ip='172.27.0.101' glusterfs_hostname=node1.gluster.internal.net glusterfs_devices='[ "/dev/sda1", "/dev/sdb1" ]'
#node[1:3].ocp.internal.net glusterfs_devices='[ "/dev/sdb", "/dev/sdc", "/dev/sdd" ]'


#[glusterfs_registry]
##infra1.ocp.internal.net glusterfs_ip='172.27.0.21' glusterfs_devices='[ "/dev/sdb", "/dev/sdc", "/dev/sdd" ]'
##infra1.ocp.internal.net glusterfs_ip='172.27.0.21' glusterfs_hostname=infra1.gluster.internal.net glusterfs_devices='[ "/dev/sda1", "/dev/sdb1" ]'
#infra[1:3].ocp.internal.net glusterfs_devices='[ "/dev/sdb", "/dev/sdc", "/dev/sdd" ]'

# Create an OSEv3 group that contains the masters and nodes groups
[OSEv3:children]
masters
nodes
etcd
lb
nfs
#glusterfs
#glusterfs_registry

[OSEv3:vars]
#ansible_user=ocp
ansible_user=root
#ansible_become=yes

# Тип развертывания
openshift_deployment_type=openshift-enterprise

# Домен по умолчанию, в котором будут создаваться имена маршрутов
openshift_master_default_subdomain=apps.ocp.customer.tld

#osm_default_node_selector='node-compute-type=dev'

# Точка входа в Кластер OpenShift (для компонентов Платформы,
# находится в частной сети на Рисуноке
openshift_master_cluster_hostname=lb.ocp.internal.net

# Публичная точка входа в Кластер OpenShift 
openshift_master_cluster_public_hostname=console.ocp.customer.tld

# Для неподдерживаемых компонентов,
# например, реестр образов на NFS-сервере
#openshift_enable_unsupported_configurations=true

# Использовать службу FirewallD при установке Платформы на ОС RHEL 7.x
os_firewall_use_firewalld=true

# Рекомендуется использовать контейнерный рантайм CRI-O
openshift_use_crio=true
openshift_use_crio_only=false
openshift_crio_enable_docker_gc=true

# Интеграция с каталогом пользователей на базе LDAP
openshift_master_identity_providers={{ lookup("file", "/root/idm-fragment.yaml") | from_yaml }}
openshift_master_ldap_ca_file=/root/IDM_CA.crt

# Сетевой плагин
os_sdn_network_plugin_name=redhat/openshift-ovs-multitenant
osm_cluster_network_cidr=100.64.0.0/14
openshift_portal_net=100.68.0.0/16
openshift_master_external_ip_network_cidrs=['100.69.0.0/16', '100.70.0.0/16']
openshift_master_ingress_ip_network_cidr=100.71.0.0/16

#  Именованный сертификат для публичной точки доступа к Кластеру OpenShift
openshift_master_named_certificates=[{ 'certfile': '/root/console.ocp.customer.tld.crt.pem', 'keyfile': '/root/console.ocp.customer.tld.key.pem', 'names': ['console.ocp.customer.tld'], 'cafile': '/root/ROOT_CA.crt' }]

# Именованный сертификат для сервиса маршрутизации
openshift_hosted_router_certificate={ 'certfile': '/root/apps.ocp.customer.tld.crt.pem', 'keyfile': '/root/apps.ocp.customer.tld.key.pem', 'cafile': '/root/ROOT_CA.crt' }

# Публичный ключ корневого Центра Сертификации,
# который будет добавлен к Кластеру OpenShift 
openshift_additional_ca=/root/ROOT_CA.crt

# Настройка реестров базовых образов
#oreg_url=__PRIVATE_DOCKER_REGISTRY_HOST__/openshift3/ose-${component}:${version}
#osm_etcd_image=__PRIVATE_DOCKER_REGISTRY_HOST__/rhel7/etcd:3.2.22
#openshift_storage_glusterfs_heketi_image=__PRIVATE_DOCKER_REGISTRY_HOST__/rhgs3/rhgs-volmanager-rhel7:latest
#openshift_storage_glusterfs_block_image=__PRIVATE_DOCKER_REGISTRY_HOST__/rhgs3/rhgs-gluster-block-prov-rhel7:latest
#openshift_storage_glusterfs_s3_image=__PRIVATE_DOCKER_REGISTRY_HOST__/rhgs3/rhgs-server-rhel7
#openshift_examples_modify_imagestreams=true
#openshift_docker_blocked_registries=docker.io,registry.access.redhat.com,registry.redhat.io
# бывает необходимо запретить проверку доступности образов,
# так как инсталлятор не может корректно это сделать
#openshift_disable_check=docker_image_availability
# в случае установки OpenShift 3.11 и реестра базовых образов,
# находящихся в redhat.io, следует указать логин/пароль
# для доступа к нему

#openshift_hosted_registry_storage_kind=glusterfs
#openshift_hosted_registry_storage_volume_size=256G
# Подключение NFS-тома с управляемого NFS-сервера
# ко встроенному реестру образов
#openshift_hosted_registry_storage_kind=nfs
#openshift_hosted_registry_storage_access_modes=['ReadWriteMany']
#openshift_hosted_registry_storage_nfs_directory=/var/export
#openshift_hosted_registry_storage_nfs_options=*(rw,root_squash)
#openshift_hosted_registry_storage_volume_name=registry

openshift_master_admission_plugin_config={{ lookup("file", "/root/admission-plugin-fragment.yaml") | from_yaml }}

# Настройки аудита обращений к OpenShift API
# https://www.outcoldsolutions.com/docs/monitoring-openshift/v4/audit/
# openshift_master_audit_config={ "enabled": true, "auditFilePath": "/var/lib/origin/audit/ocp-audit.log", "maximumFileRetentionDays": 14, "maximumFileSizeMegabytes": 500, "maximumRetainedFiles": 5, "policyFile": "/etc/security/adv-audit.yaml", "logFormat": "json" }
#openshift_master_audit_config={ "enabled": true, "auditFilePath": "/var/lib/origin/audit/ocp-audit.log", "maximumFileRetentionDays": 14, "maximumFileSizeMegabytes": 100, "maximumRetainedFiles": 5 }

# Шаблон настроек проектов
openshift_project_request_template_manage=true
#openshift_project_request_template_namespace=default
#openshift_project_request_template_name=project-request
osm_project_request_template=default/project-request
openshift_project_request_template_edits={{ lookup("file", "/root/project-request-fragment.yaml") | from_yaml }}

# Конфигурация развертывания Gluster
#{{ lookup("file", "/root/gluster-fragment.yaml") | from_yaml }}

# Конфигурация развертывания EFK
#{{ lookup("file", "/root/logging-fragment.yaml") | from_yaml }}

# Конфигурация развертывания Hawkular
#{{ lookup("file", "/root/hawkular-fragment.yaml") | from_yaml }}

# Конфигурация развертывания Prometheus
#{{ lookup("file", "/root/prometheus-fragment.yaml") | from_yaml }}

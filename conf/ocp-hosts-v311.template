---
# OpenShift Ansible Inventory

[masters]
master[1:3].ocp.internal.net

[etcd]
master[1:3].ocp.internal.net

[nodes]
master[1:3].ocp.internal.net openshift_node_group_name=node-config-master
infra[1:3].ocp.internal.net openshift_node_group_name=node-config-infra
node[1:3].ocp.internal.net openshift_node_group_name=node-config-compute

[nfs]
nfs.ocp.internal.net

[lb]
lb.ocp.internal.net

# Create an OSEv3 group that contains the masters and nodes groups
[OSEv3:children]
masters
nodes
etcd
lb
nfs

[OSEv3:vars]
ansible_user=root
#ansible_become=yes

# Тип развертывания 
openshift_deployment_type=openshift-enterprise

# Домен по умолчанию, в котором будут создаваться имена маршрутов
openshift_master_default_subdomain=apps.ocp.customer.tld

# Точка входа в Кластер OpenShift (для компонентов Платформы,
# находится в частной сети на Рисуноке
openshift_master_cluster_hostname=lb.ocp.internal.net

# Публичная точка входа в Кластер OpenShift 
openshift_master_cluster_hostname=console.ocp.customer.tld

# Для неподдерживаемых компонентов,
# например, реестр образов на NFS-сервере
#openshift_enable_unsupported_configurations=true

# Использовать службу FirewallD при установке Платформы на ОС RHEL 7.x
os_firewall_use_firewalld=true

# Рекомендуется использовать контейнерный рантайм CRI-O
openshift_use_crio=true
openshift_use_crio_only=false
openshift_crio_enable_docker_gc=true

# Все строки в формате JSON должны быть слиты в одну

# Интеграция с каталогом пользователей на базе LDAP
#openshift_master_identity_providers=[{ 'name': '__IDM_NAME__', 'challenge': 'true', 'login': 'true', 'kind': 'LDAPPasswordIdentityProvider', 'attributes': { 'id': ['dn'], 'email': ['mail'], 'name': ['cn'], 'preferredUsername': ['uid']}, 'bindDN': 'uid=ocp-proxy,cn=users,cn=accounts,__DC__', 'bindPassword': '__IDM_BIND_PASSWORD__', 'ca': '/etc/origin/master/IDM_CA.crt', 'insecure': 'false', 'url':'ldap://__IDM_HOST__/__DC__?uid?sub?(memberOf=cn=ocp-users,cn=groups,cn=accounts,__DC__)'}]
openshift_master_identity_providers={{ lookup("file", "/root/idm-fragment.yaml") | from_yaml }}

openshift_master_ldap_ca_file=/root/IDM_CA.crt

# Сетевой плагин 
os_sdn_network_plugin_name=redhat/openshift-ovs-multitenant

#  Именованный сертификат для публичной точки доступа к Кластеру OpenShift
openshift_master_named_certificates=[{ 'certfile': '/root/console.ocp.customer.tld.crt', 'keyfile': '/root/console.ocp.customer.tld.key', 'names': ['console.ocp.customer.tld'], 'cafile': '/root/ROOT_CA.crt' }]

# Именованный сертификат для сервиса маршрутизации
openshift_hosted_router_certificate={ 'certfile': '/root/apps.ocp.customer.tld.crt', 'keyfile': '/root/apps.ocp.customer.tld.key', 'cafile': '/root/ROOT_CA.crt' }

# Публичный ключ корневого Центра Сертификации,
# который будет добавлен к Кластеру OpenShift 
openshift_additional_ca=/root/ROOT_CA.crt

# Настройка реестров базовых образов
#oreg_url=__PRIVATE_DOCKER_REGISTRY_HOST__/openshift3/ose-${component}:${version}
#openshift_examples_modify_imagestreams=true
#openshift_docker_blocked_registries=docker.io,registry.access.redhat.com
# необходимо запретить проверку доступности образов,
# так как инсталлятор не может корректно это сделать в данный момент
#openshift_disable_check=docker_image_availability
# в случае установки OpenShift 3.11 и реестра базовых образов,
# находящихся в redhat.io, следует указать логин/пароль
# для доступа к нему

# Подключение NFS-тома с управляемого NFS-сервера
# ко встроенному реестру образов
openshift_hosted_registry_storage_kind=nfs
openshift_hosted_registry_storage_access_modes=['ReadWriteMany']
openshift_hosted_registry_storage_nfs_directory=/var/export
openshift_hosted_registry_storage_nfs_options=*(rw,root_squash)
openshift_hosted_registry_storage_volume_name=registry
openshift_hosted_registry_storage_volume_size=10Gi

# Установить агрегатор логов
openshift_logging_install_logging=true
# подключение NFS-тома с управляемого NFS-сервера к агератору логов
openshift_logging_storage_kind=nfs
openshift_logging_storage_access_modes=['ReadWriteOnce']
openshift_logging_storage_nfs_directory=/var/export
openshift_logging_ops_storage_nfs_directory=/var/export
openshift_logging_storage_nfs_options=*(rw,root_squash)
openshift_logging_storage_volume_name=logging
openshift_logging_storage_volume_size=10Gi
openshift_logging_storage_labels={'storage': 'logging'}
# Развертывать компоненты агрегатора только на инфраструктурных узлах
openshift_logging_curator_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
openshift_logging_kibana_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
openshift_logging_es_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
openshift_logging_es_memory_limit=1G
#openshift_logging_es_ops_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
#openshift_logging_es_ops_memory_limit=1G
#openshift_logging_kibana_ops_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
#openshift_logging_curator_ops_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }

# Установить сбор метрик
#openshift_hosted_metrics_deploy=true
openshift_metrics_install_metrics=true
# подключение NFS-тома с управляемого NFS-сервера к агератору логов
openshift_metrics_storage_kind=nfs
openshift_metrics_storage_access_modes=['ReadWriteOnce']
openshift_metrics_storage_nfs_directory=/var/export
openshift_metrics_storage_nfs_options=*(rw,root_squash)
openshift_metrics_storage_volume_name=cassandra
openshift_metrics_storage_volume_size=10Gi
openshift_metrics_storage_labels={'storage': 'metrics'}
# Развертывать компоненты сбора метрик только 
# на инфраструктурных узлах
openshift_metrics_hawkular_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
openshift_metrics_cassandra_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }
openshift_metrics_heapster_nodeselector={ 'node-role.kubernetes.io/infra': 'true' }

# Установить подсистему мониторинга, использовать выделение СХД типа PVC
# для версии 3.11 Prometheus развертывается автоматически
#  (openshift_prometheus_state=present)
# для 3.10 необходимо указать переменную установки
# openshift_metrics_install_metrics=true

#openshift_prometheus_storage_type=pvc
openshift_prometheus_storage_kind=nfs
openshift_prometheus_storage_access_modes=['ReadWriteOnes']
openshift_prometheus_storage_nfs_directory="/var/export"
openshift_prometheus_storage_nfs_options=*(rw,root_squash)
openshift_prometheus_storage_volume_name=prometheus
openshift_prometheus_storage_volume_size=10Gi

# Set node selector for prometheus
openshift_prometheus_node_selector={ 'node-role.kubernetes.io/infra': 'true' }

#
#openshift_master_admission_plugin_config={ 'ProjectRequestLimit': { 'configuration': { 'apiVersion': 'v1', 'kind': 'ProjectRequestLimitConfig', 'limits': [{ 'selector': { 'admin': 'true' }}, { 'maxProjects': '1' }] }}, 'PodNodeConstraints': { 'configuration': { 'apiVersion': 'v1', 'kind': 'PodNodeConstraintsConfig' } }}
openshift_master_admission_plugin_config={{ lookup("file", "/root/admission-plugin-fragment.yaml") | from_yaml }}

# Шаблон настроек проектов
openshift_project_request_template_manage=true
#openshift_project_request_template_namespace=default
#openshift_project_request_template_name=project-request

#openshift_project_request_template_edits=[{ 'key': 'objects', 'action': 'append', 'value': { 'apiVersion': 'v1', 'kind': 'ResourceQuota', 'metadata': { 'annotations': { 'openshift.io/quota-tier': 'DefaultQuote' }, 'labels': { 'quota-tier': 'DefaultQuote' }, 'name': 'quota' }, 'spec': { 'hard': { 'cpu': '2', 'memory': '12Gi' }, 'scopes': [ 'NotTerminating' ]} }}, { 'key': 'objects', 'action': 'append', 'value': { 'apiVersion': 'v1', 'kind': 'ResourceQuota', 'metadata': { 'annotations': { 'openshift.io/quota-tier': 'DefaultQuote' }, 'labels': { 'quota-tier': 'DefaultQuote' }, 'name': 'burst-quota' }, 'spec': { 'hard': { 'cpu': '4', 'memory': '16Gi'}} }}, { 'key': 'objects', 'action': 'append', 'value': { 'apiVersion': 'v1', 'kind': 'LimitRange', 'metadata': { 'annotations': { 'openshift.io/quota-tier': 'DefaultQuote' }, 'labels': { 'quota-tier': 'DefaultQuote', 'name': 'limits' }}, 'spec': { 'limits': [{'max': { 'cpu': '200m', 'memory': '2Gi' }, 'min': { 'cpu': '10m', 'memory': '128Mi' }, 'type': 'Pod' }, { 'default': { 'cpu': '50m', 'memory': '256Mi' }, 'max': { 'cpu': '200m', 'memory': '2Gi' }, 'min': { 'cpu': '20m', 'memory': '256Mi' }, 'type': 'Container' }]}}}]
openshift_project_request_template_edits={{ lookup("file", "project-request-fragment.yaml") | from_yaml }}
